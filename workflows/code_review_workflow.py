"""
This file is part of the CRQA project, which provides tools for code analysis, including code quality analysis, security scanning, test generation, and complexity analysis.
It is designed to help developers improve the quality and security of their codebases.
"""
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.conditions import  TextMentionTermination
from autogen_agentchat.ui import Console
import asyncio

class CodeReviewWorkflow:
    
    def __init__(self,agents, enable_human_feedback=False):
        """
        Initialize the code review workflow with a list of agents and an option for human feedback.
        Args:
            agents (list): A list of agent instances to be used in the workflow.
            enable_human_feedback (bool): Flag to enable human feedback in the workflow.
        """
        self.agents = agents
        self.enable_human_feedback = enable_human_feedback

    async def run_review(self,code,description="code review",review_type="comprehensive"):
        """
        code: The code to be reviewed.
        description: A brief description of the code or the review task.
        review_type: The type of review to be performed (e.g., "comprehensive", "security", "performance").
        Returns:
            str: The final review report generated by the agents.
        """
        agents=[
            self.agents["code_reviewer"],
            self.agents["security_specialist"], 
            self.agents["qa_specialist"],
            self.agents["performance_specialist"]

        ]
        ending="REVIEW_COMPLETE"

        # Create a group chat for the agents using the RoundRobinGroupChat class and set the termination condition
        group_chat = RoundRobinGroupChat(
            participants=agents,
            termination_condition=TextMentionTermination(ending),
            max_turns=10
        )

        task_message = f"""{code}
        You are tasked with reviewing the following code:
        Description: {description}
        Assign each agents their specific roles in the review process(quality, security, performance, and QA).
        Lastly, generate a comprehensive report summarizing the findings and recommendations.
        
        """
         
        try:
            transcript=[]
            async for msg in group_chat.run_stream(task=task_message):
                transcript.append(msg)
          
            
            # Extract the conversation content
            review_content = self._extract_review_content(transcript)

            
            return {
                "status": "completed",
                "review_type": review_type,
                "review": review_content,
                "timestamp": str(asyncio.get_event_loop().time())
            }
            
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "review_type": review_type
            }
    def _extract_review_content(self,transcript):

        all_content = []
        for item in transcript:# Convert to string to see what we're working with
            item_str = str(item)
            all_content.append(item_str)

        raw_result = "\n\n".join(all_content)
        lines = raw_result.split('\n')
        clean_lines = []

        for line in lines:
            line = line.strip()
            if line and not any(skip in line for skip in [
            'ToolCallExecutionEvent',
            'ToolCallSummaryMessage', 
            'call_id=',
            'is_error=',
            'You are tasked with reviewing'
        ]):
             clean_lines.append(line)
        return '\n'.join(clean_lines) if clean_lines else "No content found after filtering"
    
    